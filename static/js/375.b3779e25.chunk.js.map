{"version":3,"file":"static/js/375.b3779e25.chunk.js","mappings":"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","sources":["api/api.js","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchFilms = async () => {\n    const response = await axios.get('/trending/all/day', {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n    \n    return response.data.results;\n};\n\nexport const fetchFilmsById = async (id) => {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data;\n};\n\nexport const fetchFilmsByCredits = async (id) => {\n    const response = await axios.get(`/movie/${id}/credits`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data.cast;\n};\n\nexport const fetchFilmsReviews = async (id) => {\n    const response = await axios.get(`/movie/${id}/reviews`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n  return response.data.results;\n};\n\nexport const fetchFilmsByQuery = async (query) => {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        query: query,\n      }\n    })\n  \n  return response.data.results;\n};\n\n\n\n\n  \n\n\n","import styled from \"styled-components\";\n\nimport { NavLink } from \"react-router-dom\";\n\nexport const LinkItem = styled(NavLink)`\n    padding: 8px 16px;\n    border-radius: 4px;\n    text-decoration: none;\n    color: black;\n    font-weight: 500;\n    margin-right: 15px;\n\n  &:hover {\n    color: white;\n    background-color: orangered;\n  }\n  &.active {\n    color: white;\n    background-color: orangered;\n  }\n`;\n\nexport const BackLinkItem = styled(NavLink)`\n    padding: 8px 16px;\n    border-radius: 4px;\n    text-decoration: none;\n    color: black;\n    font-weight: 500;\n\n  &:hover {\n    color: white;\n    background-color: orangered;\n  }\n  \n`;\n\n\nexport const Wrapper = styled.div`\n  \n`\nexport const WrapperInfo = styled.div`\n  display:flex;\n  margin-top:15px;\n`\nexport const TextWrapper = styled.div`\n  padding-right:20px;\n  padding-left:20px;\n  padding-bottom:20px;\n  \n  flex-direction:column;\n`\nexport const PageTitle = styled.h2`\n  margin-top:15px;\n`\nexport const Poster = styled.img`\n\n`\nexport const Title = styled.h3`\n  font-size: 24px;\n  margin-top: 15px;\n  margin-bottom: 15px;\n`\nexport const MovieTitle = styled.h3`\n  font-size: 40px;\n`\nexport const Text = styled.p`\n  font-size: 20px;\n`\nexport const List = styled.ul`\n  display:flex;\n  margin-top: 15px;\n`;\n\nexport const ListItem = styled.li`\n  margin-top:15px;\n`;\n\n","import { useParams, Outlet, useLocation,  } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { fetchFilmsById } from \"api/api\";\nimport { Suspense } from \"react\";\nimport {\n  LinkItem,\n  Wrapper,\n  WrapperInfo,\n  TextWrapper,\n  PageTitle,\n  Poster,\n  Title,\n  MovieTitle,\n  Text,\n  ListItem,\n  List,\n  BackLinkItem\n\n} from \"./MovieDetails.styled\";\n\nconst MovieDetails = () => {\nconst { movieId } = useParams();\nconst [movieData, setMovieData] = useState(null); \nconst [genres, setGenres] = useState([])\nconst location = useLocation();\n\nconst backLinkHref = location.state?.from ?? '/';\n \n  useEffect(() => {\n    const getFetch = async () => {\n      try {\n        const result = await fetchFilmsById(movieId);\n        \n        setMovieData(result)\n        setGenres(result.genres)\n        // console.log(result);\n      } catch (err) {\n        console.log('error');\n      }\n    }\n    getFetch();\n\n    \n  },[movieId])\n\n\n  if (movieData) {\n    const { poster_path, title, release_date, popularity, overview,  } = movieData;\n    \n    const genresMap = genres.map(el=>el.name + \", \")\n    \n    return (\n    \n      <Wrapper>\n      <BackLinkItem to={backLinkHref} type='button'>Back</BackLinkItem>\n        <PageTitle>MovieDetailsPage</PageTitle>\n        <WrapperInfo>\n          <Poster\n            src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n            alt={title}\n            width=\"350\"\n          />\n          <TextWrapper>\n            <MovieTitle>\n              {movieData.title}({release_date.slice(0, 4)})\n            </MovieTitle>\n              <Title>Overview:</Title>\n                <Text>{overview}</Text>\n            <Title>\n              <Text>User Score : {Math.round(Number(popularity))}%</Text>\n            </Title>\n            <Title>Genres</Title>\n            <Text>{genresMap}</Text>\n          </TextWrapper>\n        </WrapperInfo>\n          <List>\n            <ListItem>\n              <LinkItem to='cast' state={{from: backLinkHref}} end>Cast</LinkItem>\n            </ListItem>\n            <ListItem>\n              <LinkItem to='reviews' state={{from: backLinkHref}}>Reviews</LinkItem>\n            </ListItem>\n          </List>\n          \n        <Suspense>\n          <Outlet />\n        </Suspense>\n      </Wrapper>\n      \n  )\n  }\n  return \n}\n\nexport default MovieDetails\n\n"],"names":["axios","fetchFilms","params","api_key","response","data","results","fetchFilmsById","id","fetchFilmsByCredits","cast","fetchFilmsReviews","fetchFilmsByQuery","query","LinkItem","styled","NavLink","BackLinkItem","Wrapper","WrapperInfo","TextWrapper","PageTitle","Poster","Title","MovieTitle","Text","List","ListItem","movieId","useParams","useState","movieData","setMovieData","genres","setGenres","backLinkHref","useLocation","state","from","useEffect","getFetch","result","console","log","poster_path","title","release_date","popularity","overview","genresMap","map","el","name","to","type","src","alt","width","slice","Math","round","Number","end","Suspense"],"sourceRoot":""}