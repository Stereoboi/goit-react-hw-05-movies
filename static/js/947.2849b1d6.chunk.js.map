{"version":3,"file":"static/js/947.2849b1d6.chunk.js","mappings":"kOAwEA,UAnEqB,WAAO,IAAD,IACnBA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAGMC,EAAY,qBAFDC,EAAAA,EAAAA,MAEaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAqB3C,GApBFC,QAAQC,IAAIL,IAEVM,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,8GAEQC,EAAAA,EAAAA,IAAef,GAFvB,OAEPgB,EAFO,OAIbZ,EAAaY,GACbV,EAAUU,EAAOX,QALJ,gDAQbM,QAAQC,IAAI,SARC,yDAAH,qDAWdE,GAGD,GAAC,CAACd,IAGCG,EAAW,CACb,IAAQc,EAA6Dd,EAA7Dc,YAAaC,EAAgDf,EAAhDe,MAAOC,EAAyChB,EAAzCgB,aAAcC,EAA2BjB,EAA3BiB,WAAYC,EAAelB,EAAfkB,SAEhDC,EAAYjB,EAAOkB,KAAI,SAAAC,GAAE,OAAEA,EAAGC,KAAO,GAAZ,IAE/B,OAEE,4BACA,SAAC,KAAD,CAAMC,GAAInB,EAAcoB,KAAK,SAA7B,mBACA,8CACI,gBACEC,IAAG,yCAAoCX,GACvCY,IAAKX,EACLY,MAAM,SAER,0BACG3B,EAAUe,MADb,IACqBC,EAAaY,MAAM,EAAG,GAD3C,QAGA,uCACA,uBAAIV,KACJ,yCAAiBW,KAAKC,MAAMC,OAAOd,IAAnC,QACA,oCACA,uBAAIE,KACJ,yBACE,SAAC,KAAD,CAAMI,GAAG,OAAOjB,MAAO,CAACC,KAAMH,GAA9B,qBAEF,yBACE,SAAC,KAAD,CAAMmB,GAAG,UAAUjB,MAAO,CAACC,KAAMH,GAAjC,wBAGJ,SAAC,EAAA4B,SAAD,WACE,SAAC,KAAD,QAKP,CAEF,C","sources":["components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import { useParams, Outlet, Link, useLocation,  } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { fetchFilmsById } from \"api/api\";\nimport { Suspense } from \"react\";\n\nconst MovieDetails = () => {\nconst { movieId } = useParams();\nconst [movieData, setMovieData] = useState(null); \nconst [genres, setGenres] = useState([])\nconst location = useLocation();\n\nconst backLinkHref = location.state?.from ?? '/';\nconsole.log(backLinkHref);\n \n  useEffect(() => {\n    const getFetch = async () => {\n      try {\n        const result = await fetchFilmsById(movieId);\n        \n        setMovieData(result)\n        setGenres(result.genres)\n        // console.log(result);\n      } catch (err) {\n        console.log('error');\n      }\n    }\n    getFetch();\n\n    \n  },[movieId])\n\n\n  if (movieData) {\n    const { poster_path, title, release_date, popularity, overview,  } = movieData;\n    \n    const genresMap = genres.map(el=>el.name + \" \")\n    \n    return (\n    \n      <div>\n      <Link to={backLinkHref} type='button'>Back</Link>\n      <h2>MovieDetailsPage</h2>\n          <img\n            src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n            alt={title}\n            width=\"250\"\n          />\n          <h2>\n            {movieData.title}({release_date.slice(0, 4)})\n          </h2>\n          <h3>Overview:</h3>\n          <p>{overview}</p>\n          <p>User Score : {Math.round(Number(popularity))}%</p>\n          <h3>Genres</h3>\n          <p>{genresMap}</p>\n          <li>\n            <Link to='cast' state={{from: backLinkHref}}>Cast</Link>\n          </li>\n          <li>\n            <Link to='reviews' state={{from: backLinkHref}}>Reviews</Link>\n          </li>\n          \n        <Suspense>\n          <Outlet />\n        </Suspense>\n      </div>\n      \n  )\n  }\n  return \n}\n\nexport default MovieDetails\n\n"],"names":["movieId","useParams","useState","movieData","setMovieData","genres","setGenres","backLinkHref","useLocation","state","from","console","log","useEffect","getFetch","fetchFilmsById","result","poster_path","title","release_date","popularity","overview","genresMap","map","el","name","to","type","src","alt","width","slice","Math","round","Number","Suspense"],"sourceRoot":""}