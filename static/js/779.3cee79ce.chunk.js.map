{"version":3,"file":"static/js/779.3cee79ce.chunk.js","mappings":"mWAEAA,EAAAA,GAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAU,CACrBC,UAAW,8BAGAC,EAAU,mCAAG,WAAMC,GAAN,uFACCJ,EAAAA,GAAAA,IAAU,qBAAsB,CACrDK,OAAQ,CACNC,QAAS,mCACTF,KAAMA,KAJY,cAChBG,EADgB,yBAQfA,GARe,2CAAH,sDAWVC,EAAiB,mCAAG,oGACNR,EAAAA,GAAAA,IAAU,oBAAqB,CACpDK,OAAQ,CACNC,QAAS,sCAHgB,cACvBC,EADuB,yBAQxBA,GARwB,2CAAH,qDAWjBE,EAAc,mCAAG,WAAOC,GAAP,uFACHV,EAAAA,GAAAA,IAAA,iBAAoBU,GAAM,CAC/CL,OAAQ,CACNC,QAAS,sCAHa,cACpBC,EADoB,yBAOnBA,EAASI,MAPU,2CAAH,sDAUdC,EAAmB,mCAAG,WAAOF,GAAP,uFACRV,EAAAA,GAAAA,IAAA,iBAAoBU,EAApB,YAAkC,CACvDL,OAAQ,CACNC,QAAS,sCAHkB,cACzBC,EADyB,yBAOxBA,EAASI,KAAKE,MAPU,2CAAH,sDAUnBC,EAAiB,mCAAG,WAAOJ,GAAP,uFACNV,EAAAA,GAAAA,IAAA,iBAAoBU,EAApB,YAAkC,CACvDL,OAAQ,CACNC,QAAS,sCAHgB,cACvBC,EADuB,yBAOxBA,EAASI,KAAKI,SAPU,2CAAH,sDAUjBC,EAAiB,mCAAG,WAAOC,EAAOb,GAAd,uFACNJ,EAAAA,GAAAA,IAAA,gBAA2B,CAChDK,OAAQ,CACNC,QAAS,mCACTW,MAAOA,EACPb,KAAMA,KALmB,cACvBG,EADuB,yBASxBA,GATwB,2CAAH,uD,+KC1DjBW,EAAaC,EAAAA,GAAAA,GAAH,oGAMVC,EAAaD,EAAAA,GAAAA,GAAH,qFAMVE,EAAaF,EAAAA,GAAAA,GAAH,yIAQVG,EAAsBH,EAAAA,GAAAA,IAAH,kEAKnBI,EAAqBJ,EAAAA,GAAAA,IAAH,6HAQlBK,EAAmBL,EAAAA,GAAAA,EAAH,wFAKhBM,EAAgBN,EAAAA,GAAAA,EAAH,6I,GAQKA,EAAAA,GAAAA,EAAH,+H,kBC2B5B,EA5DgB,WAChB,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4CF,EAAAA,EAAAA,WAAS,GAArD,eAAOG,EAAP,KAAuBC,EAAvB,MAEEC,EAAAA,EAAAA,YAAU,WACT,IAAMC,EAAY,mCAAG,8GAEKpB,EAAAA,EAAAA,IAAkBY,GAFvB,OAEVS,EAFU,OAGhBC,QAAQC,IAAIF,GACZL,EAAeK,GAJC,yGAAH,qDASjBD,GACF,GAAC,CAACR,IAeF,OAAIG,EAAYS,OAAS,GAEvB,SAAClB,EAAD,UACOS,EAAYU,KAAI,YAA8C,IAA3C7B,EAA0C,EAA1CA,GAAI8B,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,QACxCC,EAjBG,SAACC,GAClB,IAAID,EAASE,EAQb,OANID,IACFD,EAASC,EAAWE,WAAW,SAC3BF,EAAWG,MAAM,GADZ,UAEF9C,EAAAA,GAAAA,UAFE,iBAEwB2C,IAG5BD,CACR,CAOwBK,CAAWP,EAAeQ,aAEzC,OACE,UAAC5B,EAAD,YACE,UAACC,EAAD,YACE,SAACC,EAAD,CACE2B,IAAKnB,EAAiBY,EAASE,EAC/BM,MAAM,KACNC,OAAO,KACPC,OAAQ,kBAAMrB,GAAkB,EAAxB,KAEV,SAACR,EAAD,UAAmBgB,QAErB,SAACf,EAAD,UAAgBiB,MAVDhC,EAapB,OAKF,SAACQ,EAAD,kCAER,C","sources":["api/api.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const API_IMG = {\n  IMAGE_URL: 'https://image.tmdb.org/t/p',\n}\n\nexport const fetchFilms = async page => {\n    const response = await axios.get('/trending/all/week', {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        page: page\n      }\n    })\n    \n    return response;\n};\n\nexport const fetchFilmsByGenre = async () => {\n    const response = await axios.get('/genre/movie/list', {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        \n      }\n    })\n    \n  return response ;\n};\n\nexport const fetchFilmsById = async (id) => {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data;\n};\n\nexport const fetchFilmsByCredits = async (id) => {\n    const response = await axios.get(`/movie/${id}/credits`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data.cast;\n};\n\nexport const fetchFilmsReviews = async (id) => {\n    const response = await axios.get(`/movie/${id}/reviews`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n  return response.data.results;\n};\n\nexport const fetchFilmsByQuery = async (query, page) => {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        query: query,\n        page: page,\n      }\n    })\n  \n  return response;\n};\n\n\n\n\n  \n\n\n","import styled from \"styled-components\";\n\nexport const ErrorTitle = styled.h3`\n    margin-top:40px;\n    font-size: 40px;\n    text-transform: uppercase;\n`\n\nexport const ReviewList = styled.ul`\n  margin-top:35px;\n  height: 100%;\n  scroll-margin: 30px;\n`;\n\nexport const ReviewItem = styled.li`\n  border-bottom: 2px solid lightgrey;\n  overflow: auto;\n  &:not(:last-child) {\n    margin-bottom: 20px;\n  }\n`;\n\nexport const ReviewAuthorWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const ReviewAuthorAvatar = styled.img`\n  width: 50px;\n  height: 50px;\n  margin-right: 10px;\n  object-fit: cover;\n  border-radius: 50%;\n`;\n\nexport const ReviewAuthorName = styled.b`\n  text-transform: uppercase;\n  color: var(--color-dark-grey);\n`;\n\nexport const ReviewContent = styled.p`\n  padding: 20px 0;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 1.67;\n  color: var(--color-dark-grey);\n`;\n\nexport const NotFoundMessage = styled.p`\n  margin-bottom: 30px;\n  text-align: center;\n  font-weight: 500;\n  font-size: 30px;\n  color: red;\n`;","import { useParams, } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { fetchFilmsReviews } from \"api/api\";\nimport {\n  ReviewList,\n  ReviewItem,\n  ReviewAuthorWrapper,\n  ReviewAuthorAvatar,\n  ReviewAuthorName,\n  ReviewContent,\n  ErrorTitle\n} from \"./Reviews.styled\";\nimport { API_IMG } from \"api/api\";\nimport Default from \"../../Images/Default.png\"\n\nconst Reviews = () => { \nconst { movieId } = useParams();\nconst [reviewsData, setReviewsData] = useState([]); \nconst [isAvatarLoaded, setIsAvatarLoaded] = useState(false);\n\n  useEffect(() => {\n   const getFetchCast = async () => {\n      try {\n        const result = await fetchFilmsReviews(movieId);\n        console.log(result);\n        setReviewsData(result)\n      } catch (err) {\n        \n      }\n    }\n    getFetchCast();\n },[movieId])\n \n  const userAvatar = (avatarPath) => {\n    let avatar = Default;\n\n    if (avatarPath) {\n      avatar = avatarPath.startsWith(\"/http\")\n        ? avatarPath.slice(1)\n        : `${API_IMG.IMAGE_URL}/w200/${avatarPath}`;\n    }\n\n    return avatar;\n  };\n\n\n  if (reviewsData.length > 0) {\n    return (\n    <ReviewList >\n          {reviewsData.map(({ id, author, author_details, content }) => {\n            const avatar = userAvatar(author_details.avatar_path);\n\n            return (\n              <ReviewItem key={id}>\n                <ReviewAuthorWrapper>\n                  <ReviewAuthorAvatar\n                    src={isAvatarLoaded ? avatar : Default}\n                    width=\"50\"\n                    height=\"50\"\n                    onLoad={() => setIsAvatarLoaded(true)}\n                  />\n                  <ReviewAuthorName>{author}</ReviewAuthorName>\n                </ReviewAuthorWrapper>\n                <ReviewContent>{content}</ReviewContent>\n              </ReviewItem>\n            );\n          })}\n      </ReviewList>\n  )\n  }\n  \n  return <ErrorTitle>There is no reviews.</ErrorTitle> \n  \n}\n\nexport default Reviews"],"names":["axios","API_IMG","IMAGE_URL","fetchFilms","page","params","api_key","response","fetchFilmsByGenre","fetchFilmsById","id","data","fetchFilmsByCredits","cast","fetchFilmsReviews","results","fetchFilmsByQuery","query","ErrorTitle","styled","ReviewList","ReviewItem","ReviewAuthorWrapper","ReviewAuthorAvatar","ReviewAuthorName","ReviewContent","movieId","useParams","useState","reviewsData","setReviewsData","isAvatarLoaded","setIsAvatarLoaded","useEffect","getFetchCast","result","console","log","length","map","author","author_details","content","avatar","avatarPath","Default","startsWith","slice","userAvatar","avatar_path","src","width","height","onLoad"],"sourceRoot":""}