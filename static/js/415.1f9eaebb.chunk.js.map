{"version":3,"file":"static/js/415.1f9eaebb.chunk.js","mappings":"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","sources":["api/api.js","components/MovieList/MovieList.styled.js","components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","components/MovieList/MovieList.jsx","components/Pagination/Pagination.jsx","pages/Home.jsx","pages/Home.styled.js"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const API_IMG = {\n  IMAGE_URL: 'https://image.tmdb.org/t/p',\n}\n\nexport const fetchFilms = async page => {\n    const response = await axios.get('/trending/all/week', {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        page: page\n      }\n    })\n    \n    return response;\n};\n\nexport const fetchFilmsByGenre = async () => {\n    const response = await axios.get('/genre/movie/list', {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        \n      }\n    })\n    \n  return response ;\n};\n\nexport const fetchFilmsById = async (id) => {\n    const response = await axios.get(`/movie/${id}`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data;\n};\n\nexport const fetchFilmsByCredits = async (id) => {\n    const response = await axios.get(`/movie/${id}/credits`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n    return response.data.cast;\n};\n\nexport const fetchFilmsReviews = async (id) => {\n    const response = await axios.get(`/movie/${id}/reviews`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n      }\n    })\n  \n  return response.data.results;\n};\n\nexport const fetchFilmsByQuery = async (query, page) => {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        api_key: 'ac2f015efbd63aedea7bf25c08e7a150',\n        query: query,\n        page: page,\n      }\n    })\n  \n  return response;\n};\n\n\n\n\n  \n\n\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n  display: grid;\n  margin-top:40px;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n  margin-bottom: 50px;\n`;","import styled from \"styled-components\";\n\nexport const Item = styled.li``;\n\nexport const Image = styled.img`\n  width: 100%;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  object-fit: cover;\n  box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 2px 5px 0 rgb(0 0 0 / 14%),\n    0 2px 10px -1px rgb(0 0 0 / 12%);\n  transition: all 250ms ease-in-out;\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    transform: scale(1.05) translateY(-5px);\n    box-shadow: 0px 5px 14px 2px rgba(0, 0, 0, 0.55);\n  }\n  @media screen and (max-width: 767px) {\n    min-height: 420px;\n  }\n  @media screen and (min-width: 768px) and (max-width: 1023px) {\n    min-height: 450px;\n  }\n  @media screen and (min-width: 1024px) {\n    min-height: 310px;\n  }\n`;\n\nexport const TitleH2 = styled.h2`\n  min-height: 28px;\n  font-style: normal;\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 14px;\n  text-transform: uppercase;\n  color: var(--color-dark-grey);\n`;\n\nexport const Info = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Genres = styled.p`\n  display: inline-block;\n  margin-right: 10px;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 12px;\n  line-height: 16px;\n  color: var(--color-green);\n`;\n\nexport const Rating = styled.p`\n  min-width: 36px;\n  height: 16px;\n  border-radius: 5px;\n  font-style: normal;\n  font-weight: 500;\n  font-size: 12px;\n  text-align: center;\n  line-height: 16px;\n  color: #ffffff;\n  background-color: ${props => {\n  if (props.rating <= 4) {\n    return `tomato`\n  }\n  if (props.rating <= 7) {\n    return `#F78D05`\n  }\n  if (props.rating <= 10) {\n    return `var(--color-green)`\n  }\n  } };\n`;","import { Link, useLocation } from \"react-router-dom\"\nimport { Item,Image, TitleH2, Info, Genres, Rating } from \"./MovieItem.styled\"\nimport { useState } from \"react\";\nimport { API_IMG } from \"api/api\";\nimport defaultImage from \"../../Images/defaultImage.png\"\n\n\nexport const MovieItem = ({ id, posterPath, title, genres, releaseDate, rating }) => {\n  const [isPosterLoaded, setIsPosterLoaded] = useState(false);\n  const location = useLocation();\n\n  return (\n    <Item>\n      <Link\n        to={`/movies/${id}`} state={{ from: location }}\n      >\n        <Image\n          src={\n            posterPath && isPosterLoaded\n              ? `${API_IMG.IMAGE_URL}/w300${posterPath}`\n              : defaultImage\n          }\n          alt={title}\n          onLoad={() => setIsPosterLoaded(true)}\n          width=\"300\"\n          height=\"450\"\n        />\n      </Link>\n\n      <TitleH2>{title}</TitleH2>\n\n      <Info>\n        <Genres>\n          {genres} | {releaseDate.substring(0, 4)}\n        </Genres>\n\n        <Rating rating={rating} >{rating.toFixed(1)}</Rating>\n      </Info>\n    </Item>\n  )\n\n}","import { List } from \"./MovieList.styled\"\nimport { MovieItem } from \"components/MovieItem/MovieItem\"\nimport { useState, useEffect } from \"react\"\nimport { fetchFilmsByGenre } from \"api/api\"\n\nexport const MovieList = ({trendingFils}) => {\n\n  \n\n  const [genreList, setGenreList] = useState([])\n  \n  useEffect(() => {\n\n    const getFetch = async () => {\n      try {\n        const result = await fetchFilmsByGenre();\n        // console.log(result);\n        setGenreList(result.data.genres)\n        \n      } catch (err) {\n        console.log('error');\n      }\n    }\n    getFetch();\n  }, [])\n  \n  return (\n      <List>\n      {trendingFils.map(\n        ({ id, poster_path, title, release_date, vote_average, genre_ids }) => {\n          \n          const movieGenres = genreList\n            .filter((genre) => genre_ids.includes(genre.id))\n            .map((genre) => genre.name)\n            .join(', ')\n\n          return (\n            <MovieItem\n              key={id}\n              id={id}\n              posterPath={poster_path}\n              title={title}\n              releaseDate={release_date || '\\u2015'}\n              rating={vote_average}\n              genres={movieGenres || '\\u2015'}\n            />\n          )\n        },\n      )}\n    </List>\n    )\n}","import * as React from 'react';\nimport Stack from '@mui/material/Stack';\nimport Pagination from '@mui/material/Pagination';\n\nexport default function PaginationButtons({ handleClick, page, totalPages}) {\n  \n  return (\n    <Stack spacing={2}>\n      \n      <Pagination\n        onChange={(e, value) => handleClick(value)}\n        count={totalPages}\n        variant=\"outlined\"\n        \n        page={page}\n        sx={{\n          \".MuiPaginationItem-root.Mui-selected\": {\n            color: \"green\",\n            border: \"1px solid green\",\n            backgroundColor: \"rgba(25, 118, 210, 0.12)\",\n          },\n          \".MuiPagination-ul\": {\n            justifyContent: \"center\",\n            marginBottom: \"50px\",\n          },\n        }}\n      />\n        \n    </Stack>\n  );\n}\n\n","import { fetchFilms } from \"api/api\";\nimport { useEffect, useState } from \"react\";\nimport { MovieList } from \"components/MovieList/MovieList\";\nimport { MovieWrapper } from \"./Home.styled\";\nimport PaginationButtons from \"components/Pagination/Pagination\";\nimport { useSearchParams } from \"react-router-dom\";\n\n\nconst Home = () => {\n  const [trendingFils, setTrendingFils] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const pageParam = searchParams.get(\"page\") || 1 ;\n  \n  \n  useEffect(() => {\n\n    const getFetch = async () => {\n      try {\n        const result = await fetchFilms(pageParam);\n        setTrendingFils([...result.data.results])\n        setTotalPages(result.data.total_pages)\n        setPage(result.data.page)\n      } catch (err) {\n        console.log('error');\n      }\n    }\n    getFetch();\n  }, [pageParam, totalPages])\n\n  const handleClickPagination = (page) => {\n    setSearchParams({ page: page })\n    setPage(page)\n  }\n  \n  return (\n    <MovieWrapper>\n      <MovieList trendingFils={trendingFils} />\n      <PaginationButtons\n        page={page}\n        handleClick={handleClickPagination}\n        totalPages={totalPages}\n      />\n    </MovieWrapper>\n  );\n};\n\nexport default Home","import styled from \"styled-components\";\n\n\n\n\n\n\nexport const MovieWrapper = styled.main`\n  \n`;"],"names":["axios","API_IMG","IMAGE_URL","fetchFilms","page","params","api_key","response","fetchFilmsByGenre","fetchFilmsById","id","data","fetchFilmsByCredits","cast","fetchFilmsReviews","results","fetchFilmsByQuery","query","List","styled","Item","Image","TitleH2","Info","Genres","Rating","props","rating","MovieItem","posterPath","title","genres","releaseDate","useState","isPosterLoaded","setIsPosterLoaded","location","useLocation","to","state","from","src","defaultImage","alt","onLoad","width","height","substring","toFixed","MovieList","trendingFils","genreList","setGenreList","useEffect","getFetch","result","console","log","map","poster_path","release_date","vote_average","genre_ids","movieGenres","filter","genre","includes","name","join","PaginationButtons","handleClick","totalPages","spacing","onChange","e","value","count","variant","sx","color","border","backgroundColor","justifyContent","marginBottom","setTrendingFils","setPage","setTotalPages","useSearchParams","searchParams","setSearchParams","pageParam","get","total_pages","MovieWrapper"],"sourceRoot":""}